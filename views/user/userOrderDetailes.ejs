<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Order Details</title>
    <!-- Bootstrap icon -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
    />
    <!-- Bootstrap 5 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Google Fonts for better typography -->
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        background-color: #ffffff;
        color: #000000;
        font-family: "Roboto", sans-serif;
        padding: 20px;
      }
      .order-details-container {
        max-width: 900px;
        margin: 0 auto;
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      }
      .order-header {
        font-size: 1.5rem;
        font-weight: 500;
        text-transform: uppercase;
        border-bottom: 2px solid #000000;
        padding-bottom: 10px;
        margin-bottom: 20px;
      }
      .section-header {
        font-size: 1.2rem;
        font-weight: 500;
        text-transform: uppercase;
        margin-bottom: 15px;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 5px;
      }
      .product-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background-color: #ffffff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }
      .product-table th,
      .product-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e0e0e0;
        vertical-align: middle;
      }
      .product-table th {
        background-color: #000000;
        color: #ffffff;
        font-weight: 500;
        text-transform: uppercase;
        font-size: 0.85rem;
      }
      .product-table tr:last-child td {
        border-bottom: none;
      }
      .product-table img {
        width: 50px;
        border-radius: 4px;
        border: 1px solid #e0e0e0;
      }
      .status-delivered,
      .status-shipped {
        background-color: #000000;
        color: #ffffff;
        font-size: 0.8rem;
        padding: 4px 12px;
        border-radius: 20px;
        text-transform: uppercase;
        display: inline-block;
      }
      .order-status {
        margin-top: 20px;
      }
      .button-div {
        display: flex;
        flex-direction: column;
      }
      .order-status .highlighted-status {
        background-color: #000000;
        color: #ffffff;
        font-size: 0.9rem;
        padding: 6px 16px;
        border-radius: 20px;
        text-transform: uppercase;
        display: inline-block;
      }
      .address-box {
        background-color: #f8f8f8;
        padding: 15px;
        border-radius: 5px;
        border: 1px solid #e0e0e0;
        margin-top: 20px;
      }
      .total-box {
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #e0e0e0;
      }
      .total-box p {
        font-size: 0.9rem;
        margin-bottom: 5px;
      }
      .total-box .total {
        font-weight: 500;
        font-size: 1rem;
      }
      .btn-cancel {
        background-color: #000000;
        color: #ffffff;
        border: none;
        text-transform: uppercase;
        padding: 6px 12px;
        font-size: 0.8rem;
        border-radius: 5px;
        transition: background-color 0.3s;
      }
      .btn-cancel:hover {
        background-color: #333333;
      }
      .btn-go-back {
        color: #000000;
        text-decoration: underline;
        font-size: 0.9rem;
      }
      .btn-go-back:hover {
        color: #333333;
      }
      .btn-retry {
        width: 10rem;
        text-decoration: none;
      }
    </style>
  </head>
  <body>
    <div class="order-details-container">
      <h5 class="order-header">Order Details</h5>

      <!-- Order Summary Section (Product Table) -->
      <div class="order-summary">
        <h6 class="section-header"><%= order.orderId.slice(-6) %></h6>
        <div class="table-responsive">
          <table class="product-table">
            <thead>
              <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total Price</th>
                <th>Status</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <% order.orderedItems.forEach((item)=>{ %>
              <tr>
                <td>
                  <img
                    src="<%= item.productId.productImage[0] %>"
                    alt="Watch"
                  />
                </td>
                <td><%= item.productId.productName %></td>
                <td><%= item.offerPrice.toFixed(2) %></td>
                <td><%= item.quantity %></td>
                <td>₹<%= item.totalOfferPrice.toFixed(2) %></td>
                <td><span class="status-delivered"><%= item.status%></span></td>

                <td>
                  <% if (item.status === 'Pending' || item.status ===
                  'Processing' ) { %>
                  <button
                    class="btn-singleItem-cancel btn btn-dark"
                    data-item-id="<%= item._id %>"
                  >
                    Cancel
                  </button>
                  <% } else if (item.status === 'Delivered') { %>
                  <button
                    class="btn-single-returnReq btn btn-dark"
                    data-item-id="<%= item._id %>"
                  >
                    Return
                  </button>
                  <% } else { %>
                  <span class="text-muted">Not Available</span>
                  <% } %>
                </td>
              </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Order Status Section (Single Line, Highlighted) -->
      <div class="order-status">
        <h6 class="section-header">Order Status</h6>
        <div class="button-div">
          <span class="highlighted-status" style="width: 10rem"
            ><%= order.status %></span
          >
          <br />
          <% if (order.status === 'Delivered') { %>
          <a
            href="/invoice/<%= order._id %>"
            class="btn btn-success"
            style="width: 11rem"
            download
          >
            <i class="bi bi-download"></i> Download Invoice
          </a>
          <% } %> <% if(order.status==="Payment failed"){ %>
          <button class="btn-retry btn btn-danger">Retry Payment</button>
          <% } %>
        </div>
      </div>

      <!-- Address Section -->
      <div class="address-box">
        <h6 class="section-header">Address</h6>
        <p><%= order.address.name %></p>
        <p>
          <%= order.address.streetAddress %>, <%= order.address.appartment %>,
          <%= order.address.postcode %>, <%= order.address.city %>,<%=
          order.address.state %>,<%= order.address.phone %>
        </p>
      </div>

      <!-- Total Amount Section -->
      <div class="total-box">
        <h6 class="section-header">Total Amount</h6>
        <p><strong>Subtotal</strong> ₹<%= order.totalAmount.toFixed(2) %></p>
        <p>
          <strong>Discount</strong> ₹<%=
          (order.totalAmount-order.finalAmount).toFixed(2) %>
        </p>
        <p class="total">
          <strong>Total</strong> ₹<%= order.finalAmount.toFixed(2) %>
        </p>
      </div>

      <!-- Action Buttons -->
      <div class="d-flex justify-content-between mt-3">
        <a href="/orderList" class="btn btn-secondary">Go to page</a>
        <% if (order.status === 'Pending' || order.status === 'Processing' ) {
        %>
        <button class="btn-cancel-order btn-cancel">Cancel Order</button>
        <% } else if (order.status === 'Delivered') { %>
        <button class="btn-return-order btn-cancel">Return Order</button>
        <% } else { %>
        <span class="text-muted">Not Available</span>
        <% } %>
      </div>
    </div>

    <!-- Return Reason Modal -->
    <div
      class="modal fade"
      id="returnReasonModal"
      tabindex="-1"
      aria-labelledby="returnReasonModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="returnReasonModalLabel">
              Return Product
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <textarea
              id="returnReasonText"
              class="form-control"
              placeholder="Enter return reason..."
              rows="4"
            ></textarea>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              id="confirmReturnBtn"
              class="btn-confirmReturn btn btn-dark"
            >
              Confirm Return
            </button>
          </div>
        </div>
      </div>
    </div>
    <!-- Single Product Return Reason Modal -->
    <div
      class="modal fade"
      id="singleProductReturnReason"
      tabindex="-1"
      aria-labelledby="returnReasonModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <form id="singleItemReturnReqForm">
            <div class="modal-header">
              <h5 class="modal-title" id="returnReasonModalLabel">
                Return Reason
              </h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <input type="hidden" name="itemId" id="modalItemId" />
              <div class="mb-3">
                <label for="returnReason" class="form-label">Reason</label>
                <textarea
                  class="form-control"
                  id="returnReason"
                  name="reason"
                ></textarea>
              </div>
            </div>
            <div class="modal-footer">
              <button type="submit" class="btn btn-dark">Submit</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Bootstrap 5 JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      //  order return request
      // open reson modal
      document
        .querySelector(".btn-return-order")
        ?.addEventListener("click", () => {
          const returnModal = new bootstrap.Modal(
            document.getElementById("returnReasonModal")
          );
          returnModal.show();
        });

      // check reson is typed or not

      document
        .querySelector(".btn-confirmReturn")
        ?.addEventListener("click", async () => {
          const reson = document
            .getElementById("returnReasonText")
            .value.trim();
          if (!reson) {
            return Swal.fire(
              "Error",
              "Please enter a reason for the return.",
              "error"
            );
          }

          const result = await Swal.fire({
            title: "Are you sure?",
            text: "You want to return this order.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, return it!",
          });

          if (result.isConfirmed) {
            const orderId = "<%= order._id %>";

            fetch("/returnReq", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ reson, orderId }),
            })
              .then((res) => res.json())
              .then((data) => {
                if (data.success) {
                  Swal.fire({
                    title: "Submited",
                    text: "Return request submited",
                    icon: "success",
                    timer: 1500,
                    showConfirmButton: false,
                  }).then(() => location.reload());
                } else {
                  Swal.fire(data.message || "Something went wrong.", "error");
                }
              });
          }
        });

      // cancel order

      document
        .querySelector(".btn-cancel-order")
        ?.addEventListener("click", async () => {
          const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you really want to cancel this order?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, cancel it!",
          });

          if (result.isConfirmed) {
            const orderId = "<%= order._id %>";

            const response = await fetch("/cancelOrder", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ orderId }),
            });
            const data = await response.json();
            if (data.success) {
              Swal.fire({
                title: "Cancelled",
                text: "Your order has been cancelled.",
                icon: "success",
                timer: 1500,
                showConfirmButton: false,
              }).then(() => location.reload());
            } else {
              Swal.fire({
                title: "Error",
                text: data.message || "cancellation failed",
                icon: "error",
              });
            }
          }
        });

      // single product cancel

      document.querySelectorAll(".btn-singleItem-cancel")?.forEach((button) => {
        button.addEventListener("click", async () => {
          const orderId = "<%= order._id %>";
          const itemId = button.dataset.itemId;

          const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you want to cancel this item?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, cancel it!",
          });

          if (result.isConfirmed) {
            try {
              const response = await fetch("/cancelSingleItem", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ orderId, itemId }),
              });
              const data = await response.json();
              if (data.success) {
                Swal.fire({
                  title: "Success",
                  text: data.message || "Item cancell successfully",
                  icon: "success",
                  showCancelButton: false,
                  timer: 1500,
                }).then(() => location.reload());
              } else {
                Swal.fire({
                  title: "Failed",
                  text: data.message || "Failed to cancel item",
                  icon: "error",
                });
              }
            } catch (error) {
              console.log("something went wrong", error);
              Swal.fire({
                title: "Failed",
                text: error.message || "something went wrong",
                icon: "error",
              });
            }
          }
        });
      });

      // single product return request

      let selectedItemId = null;

      document.querySelectorAll(".btn-single-returnReq")?.forEach((button) => {
        button.addEventListener("click", function () {
          selectedItemId = this.getAttribute("data-item-id");
          document.getElementById("modalItemId").value = selectedItemId;

          const showModal = new bootstrap.Modal(
            document.getElementById("singleProductReturnReason")
          );
          showModal.show();
        });
      });

      document
        .getElementById("singleItemReturnReqForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();
          const reason = document.getElementById("returnReason").value.trim();
          const itemId = document.getElementById("modalItemId").value;
          const orderId = "<%= order._id%>";

          if (!reason) {
            return Swal.fire({
              icon: "error",
              title: "Failed",
              text: "Please fill the reason",
            });
          }

          const result = await Swal.fire({
            icon: "warning",
            title: "confirm return",
            text: "Are you sure you want to return this item?",
            showCancelButton: true,
            confirmButtonText: "Yes return it",
          });

          if (result.isConfirmed) {
            fetch("/singleItemReturnReq", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ orderId, itemId, reason }),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.success) {
                  Swal.fire({
                    icon: "success",
                    title: "Success",
                    text: data.message || "Return request send successfully",
                    showConfirmButton: false,
                    timer: 1500,
                  }).then(() => location.reload());
                } else {
                  Swal.fire({
                    icon: "error",
                    title: "Failed",
                    text: data.message || "failed to send request",
                  });
                }
              })
              .catch((error) => {
                console.error("error from single item return req", error);
                Swal.fire({
                  icon: "error",
                  title: "Error",
                  text: "Something went wrong. Please try again later.",
                });
              });
          }
        });
      // retry payment
      document
        .querySelector(".btn-retry")
        .addEventListener("click", async () => {
          const orderId = "<%= order._id %>";
          try {
            const result = await fetch("/retryPayment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ orderId }),
            });

            const data = await result.json();

            if (data.success) {
              console.log(data.message || "retry payment successfully");
              window.location.href = data.redirectUrl;
            } else {
              Swal.fire({
                icon: "error",
                title: "Failed",
                text: data.message || "failed to retry payment",
              });
            }
          } catch (error) {
            Swal.fire({
              icon: "error",
              title: "Failed",
              text: error.message || "something went wrong",
            });
          }
        });
    </script>
  </body>
</html>
