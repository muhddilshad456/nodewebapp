<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Edit Product</title>
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Cropper.js CSS -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
      rel="stylesheet"
    />
    <!-- Custom CSS -->
    <style>
      body {
        background-color: #f8f9fa;
      }
      .add-product-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 30px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .image-upload {
        border: 2px dashed #dee2e6;
        padding: 10px;
        margin-bottom: 20px;
      }
      .image-upload label,
      .image-upload input[type="file"] {
        display: block;
        text-align: left;
      }
      .preview {
        margin-top: 10px;
        text-align: left;
      }
      .form-label {
        font-weight: 500;
      }
      .btn-dark {
        background-color: #212529;
        border-color: #212529;
      }
    </style>
    <!-- Scripts -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"
      defer
    ></script>
  </head>
  <body>
    <!-- Add Product Page -->
    <div class="container add-product-container">
      <h2 class="mb-4">Edit Product</h2>
      <form
        method="post"
        action="/admin/editProduct"
        id="editProductsForm"
        enctype="multipart/form-data"
        onsubmit="handleEditFormSubmit(event)"
      >
      <input type="hidden" name="productId" value="<%= product._id %>">
        <div class="row">
          <!-- Image Upload Areas -->
          <div class="col-md-4">
            <div class="image-upload">
              <label for="image1">Image 1</label>
              <input type="file" accept="image/*" id="image1" name="image1" />
              <div class="preview" id="preview1" style="display: <%= product.productImage && product.productImage[0] ? 'block' : 'none' %>">
                <img
                  id="previewImage1"
                  src="<%= product.productImage && product.productImage[0] ? product.productImage[0] : '' %>"
                  style="max-width: 100px; max-height: 100px"
                />
              </div>
            </div>
            <div class="image-upload">
              <label for="image2">Image 2</label>
              <input type="file" accept="image/*" id="image2" name="image2" />
              <div class="preview" id="preview2" style="display: <%= product.productImage && product.productImage[1] ? 'block' : 'none' %>">
                <img
                  id="previewImage2"
                  src="<%= product.productImage && product.productImage[1] ? product.productImage[1] : '' %>"
                  style="max-width: 100px; max-height: 100px"
                />
              </div>
            </div>
            <div class="image-upload">
              <label for="image3">Image 3</label>
              <input type="file" accept="image/*" id="image3" name="image3" />
              <div class="preview" id="preview3" style="display: <%= product.productImage && product.productImage[2] ? 'block' : 'none' %>">
                <img
                  id="previewImage3"
                  src="<%= product.productImage && product.productImage[2] ? product.productImage[2] : '' %>"
                  style="max-width: 100px; max-height: 100px"
                />
              </div>
            </div>
            <span
            id="errMsg"
            class="alert alert-danger text-center"
            style="display: none"
          ></span>
          </div>
          <!-- Form Fields -->
          <div class="col-md-8">
            <div class="mb-4">
              <label for="productName" class="form-label">Product Name:</label>
              <input
                type="text"
                class="form-control"
                id="productName"
                name="productName"
                value="<%=product.productName %>"
              />
            </div>
            <div class="mb-4">
              <label for="productDescription" class="form-label"
                >Product Description:</label
              >
              <input
                type="text"
                class="form-control"
                id="productDescription"
                name="productDescription"
                value="<%=product.productDescription %>"
              />
            </div>
            <div class="mb-4">
              <label for="brand" class="form-label">Brand:</label>
              <select class="form-select" id="brand" name="brand">
                <option value="" disabled>Select a brand</option>
                <% for (let i = 0; i < brand.length; i++) { %>
                    <option
                    value="<%= brand[i]._id %>"
                    <%= product.brand && product.brand._id && String(product.brand._id) === String(brand[i]._id) ? 'selected' : '' %>
                  >
                    <%= brand[i].name %>
                  </option>
                <% } %>
              </select>
            </div>
            <div class="mb-4">
              <label for="category" class="form-label">Category:</label>
              <select class="form-select" id="category" name="category">
                <option value="" disabled>Select a category</option>
                <% for (let i = 0; i < cat.length; i++) { %>
                    <option
                    value="<%= cat[i]._id %>"
                    <%= product.category && product.category._id && String(product.category._id) === String(cat[i]._id) ? 'selected' : '' %>
                  >
                    <%= cat[i].name %>
                  </option>
                <% } %>
              </select>
            </div>
            <div class="mb-4">
              <label for="productAmount" class="form-label"
                >Product Amount:</label
              >
              <input
                type="number"
                class="form-control"
                id="productAmount"
                name="productAmount"
                value="<%=product.productAmount %>"
              />
            </div>
            <div class="mb-4">
              <label for="stockCount" class="form-label">Stock Count:</label>
              <input
                type="number"
                class="form-control"
                id="stockCount"
                name="stockCount"
                value="<%=product.stockCount %>"
              />
            </div>
            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-dark">Edit Product</button>
              <button type="button" class="btn btn-secondary">Cancel</button>
            </div>
          </div>
        </div>
      </form>
      <!-- Crop Modal -->
      <div
        class="modal fade"
        id="cropModal"
        tabindex="-1"
        aria-labelledby="cropModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <div class="img-container">
                <img
                  id="cropImage"
                  src=""
                  alt="Image to crop"
                  style="max-width: 100%"
                />
              </div>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Cancel
              </button>
              <button type="button" class="btn btn-primary" id="cropButton">
                Crop
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Scripts -->
    <script>
      function handleEditFormSubmit(event) {
        event.preventDefault();
        const productName = document.getElementById("productName").value.trim();
        const productDescription = document
          .getElementById("productDescription")
          .value.trim();
        const productAmount = document
          .getElementById("productAmount")
          .value.trim();
        const stockCount = document.getElementById("stockCount").value.trim();
        const img1 = document.getElementById("image1").files.length;
        const img2 = document.getElementById("image2").files.length;
        const img3 = document.getElementById("image3").files.length;
        const errMsg = document.getElementById("errMsg");

        // if (img1 === 0 || img2 === 0 || img3 === 0) {
        // errMsg.style.display = "block";
        // errMsg.style.color = "red";
        // errMsg.innerHTML = "Must add 3 images";
        // return;
        // }

        if (!productName || !/^[a-zA-Z\s]+$/.test(productName)) {
          errMsg.style.display = "block";
          errMsg.style.color = "red";
          errMsg.innerHTML = "Enter a valid name";
          return;
        }
       
        if (!productDescription || !/^[a-zA-Z\s]+$/.test(productDescription)) {
          errMsg.style.display = "block";
          errMsg.style.color = "red";
          errMsg.innerHTML = "Enter a valid description";
          return;
        }
        if (!productAmount || isNaN(productAmount)) {
          errMsg.style.display = "block";
          errMsg.style.color = "red";
          errMsg.innerHTML = "Enter a valid amount";
          return;
        }
        if (!stockCount || isNaN(stockCount)) {
          errMsg.style.display = "block";
          errMsg.style.color = "red";
          errMsg.innerHTML = "Enter a valid stock count";
          return
        }
        document.getElementById("editProductsForm").submit();
      }

      let cropper;
      let currentImageInputId;

      document.querySelectorAll('input[type="file"]').forEach((input) => {
        input.addEventListener("change", function (event) {
          console.log("File selected for input:", input.id);
          const file = event.target.files[0];
          if (!file) {
            console.error("No file selected");
            return;
          }
          const allowedTypes = ["image/jpeg", "image/png"];
          if (!allowedTypes.includes(file.type)) {
            errMsg.style.display = "block";
            errMsg.style.color = "red";
            errMsg.innerHTML = "Only image files (jpg, png) are allowed.";
            this.value = "";
            return;
          } else {
            console.log("File is valid:", file.name);
          }
          const reader = new FileReader();
          reader.onload = function (e) {
            console.log("FileReader loaded image");
            const cropModalElement = document.getElementById("cropModal");
            const cropImage = document.getElementById("cropImage");
            if (!cropModalElement || !cropImage) {
              console.error("Crop modal or image element not found");
              return;
            }
            cropImage.src = e.target.result;
            currentImageInputId = input.id;

            const cropModal = new bootstrap.Modal(cropModalElement, {
              backdrop: true,
              keyboard: true,
            });

            cropModal.show();
            console.log("Modal opened");

            cropModalElement.addEventListener(
              "shown.bs.modal",
              function () {
                console.log("Modal shown, initializing Cropper.js");
                if (cropper) {
                  cropper.destroy();
                  cropper = null;
                }
                try {
                  cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 0.8,
                    responsive: true,
                  });
                  console.log("Cropper initialized");
                } catch (error) {
                  console.error("Cropper initialization failed:", error);
                }
              },
              { once: true }
            );
          };
          reader.onerror = function () {
            console.error("FileReader error");
          };
          reader.readAsDataURL(file);
        });
      });

      document
        .getElementById("cropButton")
        .addEventListener("click", function () {
          console.log("Crop button clicked");
          if (!cropper) {
            console.error("Cropper not initialized");
            return;
          }
          try {
            const canvas = cropper.getCroppedCanvas({
              width: 500,
              height: 500,
            });
            if (!canvas) {
              console.error("Failed to get cropped canvas");
              return;
            }
            canvas.toBlob(
              (blob) => {
                if (!blob) {
                  console.error("Failed to create blob");
                  return;
                }
                console.log("Cropped image blob created");
                const url = URL.createObjectURL(blob);
                const previewId = `preview${currentImageInputId.replace(
                  "image",
                  ""
                )}`;
                const previewImage = document.getElementById(
                  `previewImage${currentImageInputId.replace("image", "")}`
                );
                const previewContainer = document.getElementById(previewId);

                if (!previewImage || !previewContainer) {
                  console.error("Preview elements not found:", previewId);
                  return;
                }

                previewImage.src = url;
                previewContainer.style.display = "block";
                console.log("Preview updated for:", previewId);

                const fileInput = document.getElementById(currentImageInputId);
                if (!fileInput) {
                  console.error("File input not found:", currentImageInputId);
                  return;
                }
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(
                  new File([blob], `${currentImageInputId}.jpg`, {
                    type: "image/jpeg",
                    lastModified: Date.now(),
                  })
                );
                fileInput.files = dataTransfer.files;
                console.log(
                  "Cropped image attached to input:",
                  currentImageInputId
                );

                const cropModal = bootstrap.Modal.getInstance(
                  document.getElementById("cropModal")
                );
                if (cropModal) {
                  cropModal.hide();
                  console.log("Modal closed");
                } else {
                  console.error("Failed to get modal instance");
                }

                cropper.destroy();
                cropper = null;
                console.log("Cropper destroyed");
              },
              "image/jpeg",
              0.8
            );
          } catch (error) {
            console.error("Error during cropping:", error);
          }
        });

      document
        .getElementById("cropModal")
        .addEventListener("hidden.bs.modal", () => {
          console.log("Modal hidden");
          if (cropper) {
            cropper.destroy();
            cropper = null;
            console.log("Cropper destroyed on modal close");
          }
        });
    </script>
  </body>
</html>
